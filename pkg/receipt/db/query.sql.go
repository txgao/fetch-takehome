// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5"
)

const createItem = `-- name: CreateItem :one
INSERT INTO item
(price, short_description)
VALUES(
    $1, $2
)
RETURNING item_uuid
`

type CreateItemParams struct {
	Price            float64     `json:"price"`
	ShortDescription pgtype.Text `json:"short_description"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createItem, arg.Price, arg.ShortDescription)
	var item_uuid uuid.UUID
	err := row.Scan(&item_uuid)
	return item_uuid, err
}

const createReceipt = `-- name: CreateReceipt :one
INSERT INTO receipt
(total,  purchase_time, retailer)
VALUES(
    $1, $2, $3
)
RETURNING receipt_uuid
`

type CreateReceiptParams struct {
	Total        float64   `json:"total"`
	PurchaseTime time.Time `json:"purchase_time"`
	Retailer     string    `json:"retailer"`
}

func (q *Queries) CreateReceipt(ctx context.Context, arg CreateReceiptParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createReceipt, arg.Total, arg.PurchaseTime, arg.Retailer)
	var receipt_uuid uuid.UUID
	err := row.Scan(&receipt_uuid)
	return receipt_uuid, err
}

const createReceiptItem = `-- name: CreateReceiptItem :one
INSERT INTO receipt_items
(item_uuid, receipt_uuid)
VALUES(
    $1, $2
)
RETURNING receipt_uuid, item_uuid
`

type CreateReceiptItemParams struct {
	ItemUuid    uuid.UUID `json:"item_uuid"`
	ReceiptUuid uuid.UUID `json:"receipt_uuid"`
}

type CreateReceiptItemRow struct {
	ReceiptUuid uuid.UUID `json:"receipt_uuid"`
	ItemUuid    uuid.UUID `json:"item_uuid"`
}

func (q *Queries) CreateReceiptItem(ctx context.Context, arg CreateReceiptItemParams) (CreateReceiptItemRow, error) {
	row := q.db.QueryRow(ctx, createReceiptItem, arg.ItemUuid, arg.ReceiptUuid)
	var i CreateReceiptItemRow
	err := row.Scan(&i.ReceiptUuid, &i.ItemUuid)
	return i, err
}

const getItemsByReceipt = `-- name: GetItemsByReceipt :many
SELECT i.item_uuid, i.price, i.short_description
FROM receipt_items ri, item i
WHERE ri.item_uuid = i.item_uuid
AND ri.receipt_uuid = $1
`

func (q *Queries) GetItemsByReceipt(ctx context.Context, receiptUuid uuid.UUID) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemsByReceipt, receiptUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ItemUuid, &i.Price, &i.ShortDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReceiptById = `-- name: GetReceiptById :one
SELECT receipt_uuid, total, purchase_time, retailer
FROM receipt
WHERE receipt_uuid = $1
`

type GetReceiptByIdRow struct {
	ReceiptUuid  uuid.UUID `json:"receipt_uuid"`
	Total        float64   `json:"total"`
	PurchaseTime time.Time `json:"purchase_time"`
	Retailer     string    `json:"retailer"`
}

func (q *Queries) GetReceiptById(ctx context.Context, receiptUuid uuid.UUID) (GetReceiptByIdRow, error) {
	row := q.db.QueryRow(ctx, getReceiptById, receiptUuid)
	var i GetReceiptByIdRow
	err := row.Scan(
		&i.ReceiptUuid,
		&i.Total,
		&i.PurchaseTime,
		&i.Retailer,
	)
	return i, err
}

type CreateItemForReceiptParams struct {
	Items []CreateItemParams `json:"items"`
	Receipt CreateReceiptParams `json:"receipt"`
}
type CreateItemForReceiptRow struct {
	ReceiptUuid uuid.UUID `json:"receipt_uuid"`
	Items []uuid.UUID `json:"items"`
}

func (q *Queries) CreateItemForReceipt(ctx context.Context, tx pgx.Tx, arg CreateItemForReceiptParams) (CreateItemForReceiptRow, error) {
	    // Wrap Queries with the transaction
		queries := q.WithTx(tx)

		receipt_uuid, err := queries.CreateReceipt(ctx, arg.Receipt)
		if err != nil {
			return CreateItemForReceiptRow{}, err
		}

		receipt_items := []uuid.UUID{}
		for _, i := range arg.Items{
			itemUuid, err := queries.CreateItem(ctx, i)
			if err != nil {
				return CreateItemForReceiptRow{}, err
			}
		
			r_i, err := queries.CreateReceiptItem(ctx, CreateReceiptItemParams{
				ItemUuid:   itemUuid,
				ReceiptUuid: receipt_uuid,
			})
			if err != nil {
				return CreateItemForReceiptRow{}, err
			}
			receipt_items = append(receipt_items, r_i.ItemUuid)
		}
	
		return CreateItemForReceiptRow{
			ReceiptUuid: receipt_uuid,
			Items: receipt_items,
		}, err
}